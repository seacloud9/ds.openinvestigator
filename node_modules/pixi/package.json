{
  "author": {
    "name": "Dr. Kibitz",
    "email": "info@drkibitz.com"
  },
  "bugs": "https://github.com/drkibitz/node-pixi/issues",
  "contributors": [
    {
      "name": "Mat Groves",
      "email": "mat@goodboydigital.com"
    },
    {
      "name": "Chad Engler",
      "email": "chad@pantherdev.com"
    }
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-uglify": "~0.2.4",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-connect": "~0.5.0",
    "grunt-contrib-yuidoc": "~0.5.0",
    "grunt-browserify": "~1.2.4",
    "chai": "~1.8.0",
    "karma": "~0.11.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-mocha": "~0.1.0",
    "mocha": "~1.13.0"
  },
  "description": "Super fast 2D rendering engine for browserify, that uses WebGL with a context 2d fallback.",
  "files": [
    "bin",
    "src"
  ],
  "homepage": "http://drkibitz.github.io/node-pixi/",
  "keywords": [
    "pixi",
    "render",
    "2d",
    "canvas",
    "webgl",
    "browserify"
  ],
  "license": "MIT",
  "main": "src/pixi.js",
  "name": "pixi",
  "repository": {
    "type": "git",
    "url": "https://github.com/drkibitz/node-pixi"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "version": "0.0.1",
  "readme": "[![Build Status](https://secure.travis-ci.org/drkibitz/node-pixi.png)](http://travis-ci.org/drkibitz/node-pixi)\n[![NPM version](https://badge.fury.io/js/pixi.png)](http://badge.fury.io/js/pixi)\n\n# Node Pixi Renderer\n\nThis is a fork of [Pixi.JS](https://github.com/GoodBoyDigital/pixi.js) mainly for use with [browserify](http://browserify.org/), but has also went in a slightly different direction in terms of programming style.\n\nAs of version 0.0.1, this is the first iteration and matches the public Pixi.JS API, but now modular with browserify. In later versions, the public API and architecture are subject to change and may no longer match Pixi.JS.\n\n*Basically, I am open to MAJOR refactors if they are appropriate, and it might even be completely rewritten in TypeScript in the future (not there yet). Also in the future, the goals may differ from Pixi.JS. I may streamline things and standardize only on WebGL, and maybe sooner rather than later (Saying goodbye to context 2d).*\n\n### Pixi.JS JavaScript 2D Renderer\n\nThe aim of this project is to provide a fast lightweight 2D library that works across all devices. The Pixi renderer allows everyone to enjoy the power of hardware acceleration without prior knowledge of [WebGL](http://en.wikipedia.org/wiki/WebGL). Also its fast.\n\n- [Pixi.JS README](https://github.com/GoodBoyDigital/pixi.js/blob/master/README.md)\n- [Pixi.JS Documentation](http://www.goodboydigital.com/pixijs/docs/)\n- [Pixi.JS forum](http://www.html5gamedevs.com/forum/15-pixijs/)\n- [Pixi.JS Tutorials and other helpful bits](https://github.com/GoodBoyDigital/pixi.js/wiki/Resources)\n\nThis content is released under the (http://opensource.org/licenses/MIT) MIT License.\n\n## Examples\n\n- [Basics](http://drkibitz.github.io/node-pixi/example/1-basics/)\n- [SpriteSheet](http://drkibitz.github.io/node-pixi/example/2-sprite-sheet/)\n- [MovieClip](http://drkibitz.github.io/node-pixi/example/3-movie-clip/)\n- [Balls](http://drkibitz.github.io/node-pixi/example/4-balls/)\n- [Morph](http://drkibitz.github.io/node-pixi/example/5-morph/)\n- [Interactivity](http://drkibitz.github.io/node-pixi/example/6-interactivity/)\n- [Transparent Background](http://drkibitz.github.io/node-pixi/example/7-transparent-background/)\n- [Dragging](http://drkibitz.github.io/node-pixi/example/8-dragging/)\n- [Tiling Texture](http://drkibitz.github.io/node-pixi/example/9-tiling-texture/)\n- [Text](http://drkibitz.github.io/node-pixi/example/10-text/)\n- [RenderTexture](http://drkibitz.github.io/node-pixi/example/11-render-texture/)\n- [Spine](http://drkibitz.github.io/node-pixi/example/12-spine/)\n- [Graphics](http://drkibitz.github.io/node-pixi/example/13-graphics/)\n- [Masking](http://drkibitz.github.io/node-pixi/example/14-masking/)\n\n## Install\n\nnode-pixi can be installed with [Node](http://nodejs.org/) and [NPM](https://npmjs.org/).\n\n```shell\nnpm install pixi\n```\n\n## Usage\n\n### Basic\n\nOnce installed as a `node_module`, it can now be used in node and with browserify.\n\nExample main.js:\n```javascript\n// Require pixi module\nvar pixi = require('pixi');\n\n// You can use either WebGLRenderer or CanvasRenderer\nvar renderer = pixi.WebGLRenderer(800, 600);\ndocument.body.appendChild(renderer.view);\n\nvar stage = new pixi.Stage();\nvar bunnyTexture = pixi.Texture.fromImage(\"bunny.png\");\nvar bunny = new pixi.Sprite(bunnyTexture);\n\nbunny.position.x = 400;\nbunny.position.y = 300;\nbunny.scale.x = 2;\nbunny.scale.y = 2;\n\nstage.addChild(bunny);\n\nrequestAnimationFrame(animate);\n\nfunction animate() {\n\tbunny.rotation += 0.01;\n\n\trenderer.render(stage);\n\n\trequestAnimationFrame(animate);\n}\n```\n\n### Alternative\n\nYou can completely bypass requiring the main `pixi` module, and go directly for the submodules. This is more verbose than it should be right now, but will get better in the future. Doing this makes sure you only require what you need when you need it.\n\nExample main.js:\n```javascript\n// Require modules\nvar Sprite = require('pixi/src/pixi/display/Sprite');\nvar Stage = require('pixi/src/pixi/display/Stage');\nvar Texture = require('pixi/src/pixi/textures/Texture');\nvar WebGLRenderer = require('pixi/src/pixi/renderers/webgl/WebGLRenderer');\n\nvar renderer = WebGLRenderer(800, 600);\ndocument.body.appendChild(renderer.view);\n\nvar stage = new Stage();\n// ... etc ...\n```\n\n## Build\n\nnode-pixi can be compiled with [Grunt](http://gruntjs.com/). If you don't already have this, go install [Node](http://nodejs.org/) and [NPM](https://npmjs.org/) then install the [Grunt Command Line](http://gruntjs.com/getting-started).\n```shell\nnpm install -g grunt-cli\n```\n\nGet the source:\n```shell\ngit clone https://github.com/drkibitz/node-pixi.git\n```\n\nThen, within your cloned repository, install the node-pixi's devDependencies using NPM:\n```shell\nnpm install\n```\n\nThen build with Grunt:\n```\ngrunt\n```\n\nThe default task will lint the source, browserify the source to `bin/pixi.js`, lint the bundle, run tests, and finally minify the bundle at `bin/pixi.min.js`. It also copies the minified bundle to the the example directories which are a part of the **gh-pages** branch.\n\nYou should run a dev server to view the examples in the **gh-pages** branch, one is also provided as a task:\n```\ngrunt connect\n```\n\nPlease see take a look at this project's `Gruntfile.js` for more info.\n\n## Contribute\n\nWant to contribute to node-pixi? Just make a pull request or a suggestion on [Github](https://github.com/drkibitz/node-pixi/issues). Please make sure you write tests, and run them before committing changes.\n\nIf you followed the steps in the **Build from Source** section, then you can now run the tests locally:\n```\ngrunt test\n```\n\n- The test suite uses the [karma-runner](http://karma-runner.github.io/0.10/index.html)\n- The test suite expects Firefox to be installed (This can be configured in `test/karma.conf.js`)\n- Tests are run for every [Travis CI](https://travis-ci.org/) build\n\n## Coming Soon\n\n- **node-pixi goals**\n- **node-pixi roadmap**\n- **node-pixi documentation**\n- **either update wiki, or remove it**\n- **complete unit tests, and working functional tests**\n",
  "readmeFilename": "README.md",
  "_id": "pixi@0.0.1",
  "dist": {
    "shasum": "751caa082b9925d0d6eff74fd9316bfe0c232027"
  },
  "_from": "pixi@",
  "_resolved": "https://registry.npmjs.org/pixi/-/pixi-0.0.1.tgz"
}
